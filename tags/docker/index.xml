<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Docker - Tag - Cloud Containers Virtualização &amp; IAC</title>
        <link>http://example.org/tags/docker/</link>
        <description>Docker - Tag - Cloud Containers Virtualização &amp; IAC</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>jcastro@jcastro.net ( João Castro)</managingEditor>
            <webMaster>jcastro@jcastro.net ( João Castro)</webMaster><lastBuildDate>Mon, 29 Jun 2020 20:53:40 &#43;0000</lastBuildDate><atom:link href="http://example.org/tags/docker/" rel="self" type="application/rss+xml" /><item>
    <title>Docker Basico</title>
    <link>http://example.org/linuxtips-docker/</link>
    <pubDate>Mon, 29 Jun 2020 20:53:40 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>http://example.org/linuxtips-docker/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/docker.png" referrerpolicy="no-referrer">
            </div>Instalação 1 2 3 4 5 6  curl -fsSL https://get.docker.com/ | bash docker version docker container ls   comandos docker registry e dockerhub  Comandos Utilizados:  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  docker image inspect debian docker history linuxtips/apache:1.0 docker login docker login registry.suaempresa.com docker push linuxtips/apache:1.0 docker pull linuxtips/apache:1.0 docker image ls # criando registry local docker container run -d -p 5000:5000 --restart=always --name registry registry:2 # tag na imagem docker tag IMAGEMID localhost:5000/apache   Gerenciamento de Volumes 1 2 3 4 5 6 7 8 9 10 11 12 13 14  docker container run -ti --mount type=bind,src=http://example.org/volume,dst=/volume ubuntu docker container run -ti --mount type=bind,src=http://example.org/root/primeiro_container,dst=/volume ubuntu docker container run -ti --mount type=bind,src=http://example.org/root/primeiro_container,dst=/volume,ro ubuntu docker volume create giropops docker volume rm giropops docker volume inspect giropops docker volume prune docker container run -d --mount type=volume,source=giropops,destination=/var/opa nginx docker container create -v /data --name dbdados centos docker run -d -p 5432:5432 --name pgsql1 --volumes-from dbdados -e POSTGRESQL_USER=docker -e POSTGRESQL_PASS=docker -e POSTGRESQL_DB=docker kamui/postgresql docker run -d -p 5433:5432 --name pgsql2 --volumes-from dbdados -e POSTGRESQL_USER=docker -e POSTGRESQL_PASS=docker -e POSTGRESQL_DB=docker kamui/postgresql docker run -ti --volumes-from dbdados -v $(pwd):/backup debian tar -cvf /backup/backup.]]></description>
</item></channel>
</rss>
